I"ø<p><strong>Category:</strong> Web</p>

<p>Opening the webpage we try to login with the credentials given to us 
<code class="language-plaintext highlighter-rouge">user: minion, password: banana</code>. This however returns a message saying that only admins are allowed into HQ.</p>

<p><img src="https://i.imgur.com/qSh8oiu.png" alt="alt" /></p>

<p>Using a proxy like ZAP allows us to inspect the request further. We notice that the login process consists of 2 steps.</p>
<ol>
  <li>
    <p>A post request is sent to the server with the credentials. This returns an <code class="language-plaintext highlighter-rouge">accessToken</code> that resembles a JSON Web Token (JWT). 
 <img src="https://i.imgur.com/L1LTobM.png" alt="" /></p>
  </li>
  <li>
    <p>A GET request is then made with the access token in the <code class="language-plaintext highlighter-rouge">Authorization</code> request header.
<img src="https://i.imgur.com/ZSDmQBQ.png" alt="" /></p>
  </li>
</ol>

<p>Extracting the access token, we can view its contents either by manually decoding the base64, using an online tool such as <a href="https://jwt.io">jwt.io</a> or using any <a href="https://github.com/ticarpi/jwt_tool">tool</a> of your choice.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=====================
Decoded Token Values:
=====================

Token header values:
[+] alg = "RS256"
[+] typ = "JWT"

Token payload values:
[+] username = "minion"
[+] role = "user"
[+] iat = 1607533875    ==&gt; TIMESTAMP = 2020-12-10 01:11:15 (UTC)
</code></pre></div></div>

<p>Baed on the error message, it is quite clear that we have to somehow change the role from ‚Äúuser‚Äù to ‚Äúadmin‚Äù and at the same time, update the timestamp. At this point, the first way I thought to bypass the signing was to set the algorithm to <code class="language-plaintext highlighter-rouge">None</code>. This essentially means that no signing is required. However, this vulnerability will only affect unpatched implementations of JWT. In this case, <code class="language-plaintext highlighter-rouge">"alg":"None"</code> did not work. Next I thought of trying to crack the JWT password, but that only works if the JWT used the <code class="language-plaintext highlighter-rouge">HS256 </code> algorithm which is uses symmetric encryption to sign the token. At this point, I was stuck and decided to go back to the site for clues that I may have missed. Sure enough, I did miss out something. Found in the HTML was a TODO comment</p>

<p><code class="language-plaintext highlighter-rouge">// TODO: Add client-side verification using public.pem</code></p>

<p>This immediately reminds us of another JWT vulnerability. We can change the JWT algorithm to HS256. So what happens when we change the signing algorithm from symmetric to asymmetric. Well, if the algorithm is not specified when verifying the token, the server might simply use the public key to verify the token. So what are the implications of this?</p>

<p>For tokens using <code class="language-plaintext highlighter-rouge">HS256</code>, the key is meant to be kept secret, whereas with RS256, the public key is known. If the key used for <code class="language-plaintext highlighter-rouge">HS256</code> is compromised, then we can craft any token we want.</p>

<p>To download, the public key, we can simply append <code class="language-plaintext highlighter-rouge">/public.pem</code> to the back of the url. Now we just need to change the contents which is simple base64 encoding and sign the token with <code class="language-plaintext highlighter-rouge">public.pem</code>.</p>

<p>Since I‚Äôm lazy to code and there are already many existing tools on github for JWTs I just used this tool to sign the token. Our tampered jwt looks like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1pbmlvbiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTYwNzUzNDg3NX0.Unoy8MAMqqoEqqLVWf5DQ6_oljR1L9f8oahKA9Zp8SQ
</code></pre></div></div>

<p>Its decoded contents:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=====================
Decoded Token Values:
=====================

Token header values:
[+] alg = "HS256"
[+] typ = "JWT"

Token payload values:
[+] username = "minion"
[+] role = "admin"
[+] iat = 1607534875    ==&gt; TIMESTAMP = 2020-12-10 01:27:55 (UTC)
</code></pre></div></div>

<p>Now we just need to submit use this token to make the GET request and sure enough we have our flag.</p>

<p><img src="https://i.imgur.com/r0HqOCy.png" alt="" /></p>

<p><strong>Flag:</strong> <code class="language-plaintext highlighter-rouge">govtech-csg{5!gN_0F_+h3_T!m3S}</code></p>

<p>This took me a while because I only saw the hint after about 30 mins to an hour of trying. I guess my biggest takeaway from this challenge is to always do recon properly first and don‚Äôt just blindly jump straight in and try exploit.</p>
:ET